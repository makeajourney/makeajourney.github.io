---
title : "Design Pattern"
layout : post
---

### Design Pattern

소프트웨어 공학에서의 디자인패턴은 소프트웨어 설계에서 주어진 컨텍스트 내에서 흔히 발생하는 문제에 대한 일반적으로 재사용 가능한 솔루션이다.  
- 소스나 머신코드 내에서 바로 변형 가능한 끝나지 않은 디자인(설계).  
- 다양한 상황에서 사용될 수있는 문제를 해결하는 방법에 대한 설명 또는 템플릿.  
- 애플리케이션이나 시스템을 설계할 때 보통의 문제를 해결하기 위해 사용할 수 있는 정형화된 모범사례.  
  
객체지향 디자인 패턴들은 일반적으로 관련된 최종의 애플리케이션 클래스나 오브젝트는 배제하고, 클래스나 오브젝트 간의 관계와 상호작용을 보여준다.  
  
일부 패턴들은 빌트인 function 을 가진 언어들에서는 불필요 할 수 있으므로, 변경 가능한 상태를 의미하는 패턴은 함수형 프로그래밍 언어에 적합하지 않을 수 있다.  
객체지향 패턴은 비 객체지향 언어에 적합하지 않다.  
  
디자인 패턴들은 프로그래밍 패러다임 수준과 구체적인 알고리즘 사이의 중급 컴퓨터 프로그래밍의 구조적인 접근으로 볼 수 있다.  

<br>

<https://en.wikipedia.org/wiki/Software_design_pattern> 참고


### 종류
-
-
-
- 싱글톤 패턴 (Singleton Pattern)  

#### 싱글톤 패턴 (Singleton Pattern)
어떤 클래스를 애플리케이션 내에서 제한된 인스턴스 개수, 이름처럼 주로 하나만 존재하도록 강제하는 패턴이다. 이렇게 하나만 만들어지는 클래스의 오브젝트는 애플리케이션 내에서 전역적으로 접근이 가능하다. 단일 오브젝트만 존재해야 하고, 이를 애플리케이션의 여러 곳에서 공유하는 경우에 주로 사용한다.
